”#include <stdio.h>

// 定义一个函数，求两个数的最大公约数
int gcd(int a, int b) {
  // 使用辗转相除法
  int r;
  while (b > 0) {
    r = a % b;
    a = b;
    b = r;
  }
  return a;
}

// 定义一个函数，求两个数的最小公倍数
int lcm(int a, int b) {
  // 使用公式：最小公倍数 = 两数之积 / 最大公约数
  return a * b / gcd(a, b);
}

int main() {
  // 定义一个变量，存储学号后两位
  int x;
  // 输入学号后两位
  printf("请输入学号后两位：\n");
  scanf("%d", &x);
  // 计算学号后两位+100
  int y = x + 100;
  // 计算120和y的最大公约数和最小公倍数
  int g = gcd(120, y);
  int l = lcm(120, y);
  // 输出结果
  printf("120和%d的最大公约数是%d\n", y, g);
  printf("120和%d的最小公倍数是%d\n", y, l);
  return 0;
}


#include <stdio.h>
#include <math.h>

// 定义一个判断质数的函数
int is_prime(int n) {
  // 如果n小于等于1，返回0
  if (n <= 1) {
    return 0;
  }
  // 如果n等于2，返回1
  if (n == 2) {
    return 1;
  }
  // 如果n是偶数，返回0
  if (n % 2 == 0) {
    return 0;
  }
  // 从3到sqrt(n)遍历所有奇数，如果n能被其中一个整除，返回0
  int limit = (int)sqrt(n);
  for (int i = 3; i <= limit; i += 2) {
    if (n % i == 0) {
      return 0;
    }
  }
  // 否则，返回1
  return 1;
}

int main() {
  // 用一个变量count记录质数的个数
  int count = 0;
  // 从1到300遍历所有整数，如果是质数，打印并增加count
  for (int n = 1; n <= 300; n++) {
    if (is_prime(n)) {
      printf("%d ", n);
      count++;
    }
  }
  // 打印换行符和质数的个数
  printf("\n");
  printf("300以内的质数个数为：%d\n", count);
  return 0;
}

// 定义一个冒泡排序函数
void bubble_sort(int array[], int n) {
  // 遍历数组的每个元素
  for (int i = 0; i < n; i++) {
    // 设置一个标志，用来判断是否发生了交换
    int swapped = 0;
    // 从第一个元素开始，比较相邻的两个元素，如果前一个元素大于后一个元素，就交换它们的位置
    for (int j = 0; j < n - i - 1; j++) {
      if (array[j] > array[j + 1]) {
        // 交换元素
        int temp = array[j];
        array[j] = array[j + 1];
        array[j + 1] = temp;
        // 设置标志为1，表示发生了交换
        swapped = 1;
      }
    }
    // 如果没有发生交换，说明数组已经排序好了，就可以提前结束循环
    if (swapped == 0) {
      break;
    }
  }
}

// 定义一个打印数组的函数
void print_array(int array[], int n) {
  // 遍历数组的每个元素，打印它们的值
  for (int i = 0; i < n; i++) {
    printf("%d ", array[i]);
  }
  // 打印换行符
  printf("\n");
}

// 定义一个测试数组
int test_array[] = {5, 3, 8, 2, 9, 1, 4, 7, 6};
// 获取数组的长度
int n = sizeof(test_array) / sizeof(test_array[0]);
// 调用冒泡排序函数，对数组进行排序
bubble_sort(test_array, n);
// 调用打印数组的函数，打印排序后的数组
print_array(test_array, n);

